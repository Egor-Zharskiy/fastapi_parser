version: '1.0'

services:

  fastapi-app:
    container_name: fastapi-app
    build:
      context: .
      dockerfile: app/Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./app:/app
    environment:
      PORT: 8000
    env_file:
      - ./.env
    depends_on:
      - kafka
      - zookeeper
      - mongodb

  mongodb:
    container_name: ${CONTAINER_NAME}
    image: ${IMAGE}
    ports:
      - ${DB_PORT}:27017
    volumes:
      - dbdata:/data/db

  redis:
    container_name: ${REDIS_NAME}
    image: redis:latest
    ports:
      - ${REDIS_PORT}:6379
    command: redis-server --save 20 1 --loglevel warning --requirepass ${REDIS_USER_PASSWORD}
    volumes:
      - /redisdata

  zookeeper:
    networks:
      - default
    container_name: ${ZOOKEPER_NAME}
    image: wurstmeister/zookeeper:latest
    ports:
      - "2181:2181"

  kafka:
    networks:
      - default
    container_name: ${KAFKA_NAME}
    image: wurstmeister/kafka:latest
    ports:
      - "9092:9092"

    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: ${ZOOKEPER_NAME}:2181
      KAFKA_CREATE_TOPICS: "parse_streamers_topic:1:1,parse_streams_topic:1:1,parse_games_topic:1:1,parse_category_topic:1:1,parse_brand_topic:1:1,parse_categories_names_topic:1:1"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  consumers:
    networks:
      - default
    container_name: kafka_consumers
    build:
      context: .
      dockerfile: workers/Dockerfile
    ports:
      - "8002:8002"
    depends_on:
      - kafka
      - zookeeper

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: Local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      KAFKA_CLUSTERS_0_TYPE: simple
      KAFKA_CLUSTERS_0_MODE: single

volumes:
  dbdata:
  redisdata:
